package com.bangkit.scalesappmobile.presentatiom.createscalesimport android.Manifestimport android.annotation.SuppressLintimport android.content.pm.PackageManagerimport android.net.Uriimport android.provider.MediaStoreimport android.widget.Toastimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.interaction.MutableInteractionSourceimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.layout.wrapContentHeightimport androidx.compose.foundation.layout.wrapContentWidthimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material3.Buttonimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.rememberCoroutineScopeimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.asAndroidBitmapimport androidx.compose.ui.graphics.asImageBitmapimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.core.content.ContextCompatimport androidx.core.content.FileProviderimport androidx.core.net.toUriimport androidx.hilt.navigation.compose.hiltViewModelimport com.bangkit.scalesappmobile.presentatiom.createscales.component.BloomDropDownimport com.bangkit.scalesappmobile.presentatiom.home.component.StandardToolbarimport com.bangkit.scalesappmobile.ui.theme.fontFamilyimport com.bangkit.scalesappmobile.util.compressImageimport com.bangkit.scalesappmobile.util.createImageFileimport com.bangkit.scalesappmobile.util.imageUriToImageBitmapimport com.bangkit.scalesappmobile.util.saveImageimport com.mr0xf00.easycrop.CropErrorimport com.mr0xf00.easycrop.CropResultimport com.mr0xf00.easycrop.cropimport com.mr0xf00.easycrop.rememberImageCropperimport com.mr0xf00.easycrop.ui.ImageCropperDialogimport com.ramcosta.composedestinations.annotation.Destinationimport kotlinx.coroutines.launchimport java.io.File@SuppressLint("UnrememberedMutableInteractionSource")@Destination@Composablefun CreateScalesScreen(    navigator: CreateScalesNavigator,    viewModel: CreateScalesViewModel = hiltViewModel(),) {    val name = viewModel.scalesName.value    val brand = viewModel.scalesBrand.value    val kindType = viewModel.scalesKindType.value    val serialNumber = viewModel.scalesSerialNumber.value    val location = viewModel.scalesLocation.value    val rangeCapacity = viewModel.scalesRangeCapacity.value    val unit = viewModel.scalesUnit.value    val context = LocalContext.current    val imageCropper = rememberImageCropper()    val scope = rememberCoroutineScope()    var imageUri by remember { mutableStateOf<File?>(null) }    var compressedImageUri by remember { mutableStateOf<Uri?>(null) }    var cameraPermissionState by remember {        mutableStateOf(            ContextCompat.checkSelfPermission(                context,                Manifest.permission.CAMERA            ) == PackageManager.PERMISSION_GRANTED        )    }    val cameraPermissionLauncher =        rememberLauncherForActivityResult(            contract = ActivityResultContracts.RequestPermission(),            onResult = { granted ->                cameraPermissionState = granted            }        )    @Suppress("DEPRECATION")    val photoLauncher = rememberLauncherForActivityResult(        contract = ActivityResultContracts.TakePicture(),        onResult = { success ->            if (success) {                if (imageUri != null) {                    val bitmap = MediaStore.Images.Media.getBitmap(                        context.contentResolver,                        imageUri!!.toUri()                    )                    val compressedBitmap = compressImage(bitmap)                    compressedImageUri = saveImage(context, compressedBitmap)                    scope.launch {                        when (imageCropper.crop(uri = imageUri!!.toUri(), context = context)) {                            CropError.LoadingError -> {                                Toast.makeText(                                    context,                                    "CropError.LoadingError",                                    Toast.LENGTH_SHORT                                ).show()                            }                            CropError.SavingError -> {                                Toast.makeText(                                    context,                                    "CropError.SavingError",                                    Toast.LENGTH_SHORT                                )                                    .show()                            }                            CropResult.Cancelled -> {                                Toast.makeText(                                    context,                                    "CropResult.Cancelled",                                    Toast.LENGTH_SHORT                                )                                    .show()                            }                            is CropResult.Success -> {                                viewModel.setScalesImageCover(                                    compressedImageUri                                )                            }                        }                    }                }            }        }    )    val galleryLauncher =        rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri ->            if (uri != null) {                scope.launch {                    when (val result = imageCropper.crop(uri = uri, context = context)) {                        CropError.LoadingError -> {                            Toast.makeText(context, "CropError.LoadingError", Toast.LENGTH_SHORT)                                .show()                        }                        CropError.SavingError -> {                            Toast.makeText(context, "CropError.SavingError", Toast.LENGTH_SHORT)                                .show()                        }                        CropResult.Cancelled -> {                            Toast.makeText(context, "CropResult.Cancelled", Toast.LENGTH_SHORT)                                .show()                        }                        is CropResult.Success -> {                            viewModel.setScalesImageCover(                                saveImage(                                    context = context,                                    bitmap = result.bitmap.asAndroidBitmap()                                )                            )                        }                    }                }            }        }    LaunchedEffect(key1 = true, block = {        cameraPermissionLauncher.launch(Manifest.permission.CAMERA)    })    val cropState = imageCropper.cropState    if (cropState != null) ImageCropperDialog(state = cropState)    Scaffold(        topBar = {            StandardToolbar(                navigate = {                    navigator.popBackStack()                },                title = {                    Text(text = "Create Scales", fontSize = 18.sp)                },                showBackArrow = true,                navActions = {}            )        }    ) { paddingValues ->        LazyColumn(            modifier = Modifier.padding(horizontal = 16.dp),            contentPadding = paddingValues,            verticalArrangement = Arrangement.spacedBy(12.dp)        ) {            //Menampilkan gambar yang dipilih            item {                Box(                    contentAlignment = Alignment.Center,                    modifier = Modifier                        .fillMaxWidth()                        .clip(RoundedCornerShape(12.dp))                        .background(MaterialTheme.colorScheme.surfaceVariant)                        .height(200.dp)                        .clickable {                            val photoFile = createImageFile(context)                            if (photoFile != null) {                                val photoURI = FileProvider.getUriForFile(                                    context,                                    context.applicationContext.packageName + ".fileprovider",                                    photoFile                                )                                imageUri = photoFile                                photoLauncher.launch(photoURI)                            }                        }                ) {                    if (viewModel.scalesImageCover.value == null) {                        IconButton(onClick = {                            val photoFile = createImageFile(context)                            if (photoFile != null) {                                val photoURI = FileProvider.getUriForFile(                                    context,                                    context.applicationContext.packageName + ".fileprovider",                                    photoFile                                )                                imageUri = photoFile                                photoLauncher.launch(photoURI)                            }                        }) {                            Icon(                                imageVector = Icons.Default.Add,                                contentDescription = null,                                tint = MaterialTheme.colorScheme.onSurfaceVariant                            )                        }                    }                    // Selected Image                    viewModel.scalesImageCover.value?.let { uri ->                        Image(                            modifier = Modifier                                .fillMaxSize(),                            bitmap = context.imageUriToImageBitmap(uri).asImageBitmap(),                            contentDescription = null,                            contentScale = ContentScale.Crop                        )                    }                }            }            //Menampilkan tombol untuk menambahkan gambar dari galeri            item {                Box(                    modifier = Modifier                        .wrapContentHeight()                        .wrapContentWidth()                        .border(                            width = 1.dp,                            color = MaterialTheme.colorScheme.primary,                            shape = RoundedCornerShape(12.dp)                        )                ) {                    Row(                        modifier = Modifier                            .padding(8.dp)                            .clickable(MutableInteractionSource(), null) {                                galleryLauncher.launch("image/*")                            },                        horizontalArrangement = Arrangement.End,                        verticalAlignment = Alignment.CenterVertically                    ) {                        Icon(                            imageVector = Icons.Default.Add,                            contentDescription = null                        )                        Spacer(modifier = Modifier.width(4.dp))                        Text(                            text = "upload gambar",                            style = MaterialTheme.typography.labelMedium                        )                    }                }                Spacer(modifier = Modifier.height(8.dp))            }            //Pilih nama timbangan            item {                Column(                    modifier = Modifier.fillMaxWidth(),                    verticalArrangement = Arrangement.spacedBy(4.dp)                ) {                    Text(                        text = "Nama Timbangan",                        style = MaterialTheme.typography.labelMedium                    )                    BloomDropDown(                        modifier = Modifier.fillMaxWidth(),                        options = viewModel.scalesNames,                        selectedOption = name.text,                        onOptionSelected = { item ->                            viewModel.setScalesName(item)                        }                    )                    if (name.error != null) {                        Text(                            text = name.error,                            style = MaterialTheme.typography.labelSmall,                            color = MaterialTheme.colorScheme.error,                            textAlign = TextAlign.End,                            modifier = Modifier.fillMaxWidth()                        )                    }                }            }            //Pilih merk/pabrik dan input type timbangan            item {                Spacer(modifier = Modifier.height(8.dp))                Row(                    modifier = Modifier.fillMaxWidth(),                    horizontalArrangement = Arrangement.spacedBy(8.dp)                ) {                    Column(                        modifier = Modifier.fillMaxWidth(.5f),                        verticalArrangement = Arrangement.spacedBy(4.dp)                    ) {                        Text(                            text = "Merk/Pabrik",                            style = MaterialTheme.typography.labelMedium                        )                        BloomDropDown(                            options = viewModel.brands,                            modifier = Modifier.fillMaxWidth(),                            onOptionSelected = { item ->                                viewModel.setScalesBrand(item)                            },                            selectedOption = brand.text,                        )                        if (brand.error != null) {                            Text(                                text = brand.error,                                style = MaterialTheme.typography.labelSmall,                                color = MaterialTheme.colorScheme.error,                                textAlign = TextAlign.End,                                modifier = Modifier.fillMaxWidth()                            )                        }                    }                    Column(                        modifier = Modifier.fillMaxWidth(),                        verticalArrangement = Arrangement.spacedBy(4.dp)                    ) {                        Text(                            text = "Type",                            style = MaterialTheme.typography.labelMedium                        )                        OutlinedTextField(                            modifier = Modifier.fillMaxWidth(),                            value = kindType.text,                            onValueChange = {                                viewModel.setScalesKindType(it)                            },                            colors = TextFieldDefaults.colors(),                            placeholder = {                                Text(                                    text = "Type",                                    style = MaterialTheme.typography.labelMedium                                )                            },                            keyboardOptions = KeyboardOptions.Default.copy(                                keyboardType = KeyboardType.Text,                            ),                            isError = kindType.error != null                        )                        if (kindType.error != null) {                            Text(                                text = kindType.error,                                style = MaterialTheme.typography.labelSmall,                                color = MaterialTheme.colorScheme.error,                                textAlign = TextAlign.End,                                modifier = Modifier.fillMaxWidth()                            )                        }                    }                }            }            //Input kapasitas timbangan dan satuan            item {                Spacer(modifier = Modifier.height(8.dp))                Row(                    modifier = Modifier.fillMaxWidth(),                    horizontalArrangement = Arrangement.spacedBy(8.dp)                ) {                    Column(                        modifier = Modifier.fillMaxWidth(.5f),                        verticalArrangement = Arrangement.spacedBy(4.dp)                    ) {                        Text(                            text = "Kapasitas",                            style = MaterialTheme.typography.labelMedium                        )                        OutlinedTextField(                            modifier = Modifier.fillMaxWidth(),                            value = rangeCapacity.toString(),                            onValueChange = { newValue ->                                viewModel.setScalesRangeCapacity(newValue.toIntOrNull() ?: 0)                            },                            colors = TextFieldDefaults.colors(),                            keyboardOptions = KeyboardOptions.Default.copy(                                keyboardType = KeyboardType.Number,                            ),                            isError = rangeCapacity == 0                        )                        if (rangeCapacity == 0) {                            Text(                                text = "Kapasitas tidak boleh bernilai 0",                                style = MaterialTheme.typography.labelSmall,                                color = MaterialTheme.colorScheme.error,                                textAlign = TextAlign.End,                                modifier = Modifier.fillMaxWidth()                            )                        }                    }                    Column(                        modifier = Modifier.fillMaxWidth(),                        verticalArrangement = Arrangement.spacedBy(4.dp)                    ) {                        Text(                            text = "Satuan",                            style = MaterialTheme.typography.labelMedium                        )                        BloomDropDown(                            options = viewModel.units,                            modifier = Modifier.fillMaxWidth(),                            onOptionSelected = { item ->                                viewModel.setScalesUnit(item)                            },                            selectedOption = unit.text,                        )                        if (unit.error != null) {                            Text(                                text = unit.error,                                style = MaterialTheme.typography.labelSmall,                                color = MaterialTheme.colorScheme.error,                                textAlign = TextAlign.End,                                modifier = Modifier.fillMaxWidth()                            )                        }                    }                }            }            //Input serial number dan lokasi timbangan            item {                Spacer(modifier = Modifier.height(8.dp))                Row(                    modifier = Modifier.fillMaxWidth(),                    horizontalArrangement = Arrangement.spacedBy(8.dp)                ) {                    Column(                        modifier = Modifier.fillMaxWidth(.5f),                        verticalArrangement = Arrangement.spacedBy(4.dp)                    ) {                        Text(                            text = "Serial Number",                            style = MaterialTheme.typography.labelMedium                        )                        OutlinedTextField(                            modifier = Modifier.fillMaxWidth(),                            value = serialNumber.text,                            onValueChange = {                                viewModel.setScalesSerialNumber(it)                            },                            colors = TextFieldDefaults.colors(),                            placeholder = {                                Text(                                    text = "Serial Number",                                    style = MaterialTheme.typography.labelMedium                                )                            },                            keyboardOptions = KeyboardOptions.Default.copy(                                keyboardType = KeyboardType.Text,                            ),                            isError = serialNumber.error != null                        )                        if (serialNumber.error != null) {                            Text(                                text = serialNumber.error,                                style = MaterialTheme.typography.labelSmall,                                color = MaterialTheme.colorScheme.error,                                textAlign = TextAlign.End,                                modifier = Modifier.fillMaxWidth()                            )                        }                    }                    Column(                        modifier = Modifier.fillMaxWidth(),                        verticalArrangement = Arrangement.spacedBy(4.dp)                    ) {                        Text(                            text = "Lokasi",                            style = MaterialTheme.typography.labelMedium                        )                        OutlinedTextField(                            modifier = Modifier.fillMaxWidth(),                            value = location.text,                            onValueChange = {                                viewModel.setScalesLocation(it)                            },                            colors = TextFieldDefaults.colors(),                            placeholder = {                                Text(                                    text = "Lokasi",                                    style = MaterialTheme.typography.labelMedium                                )                            },                            keyboardOptions = KeyboardOptions.Default.copy(                                keyboardType = KeyboardType.Text,                            ),                            isError = location.error != null                        )                        if (location.error != null) {                            Text(                                text = location.error,                                style = MaterialTheme.typography.labelSmall,                                color = MaterialTheme.colorScheme.error,                                textAlign = TextAlign.End,                                modifier = Modifier.fillMaxWidth()                            )                        }                    }                }            }            //Spasi            item {                Spacer(modifier = Modifier.height(8.dp))            }            //Tombol Next            item {                Button(                    modifier = Modifier.fillMaxWidth(),                    onClick = {                        if (name.text.isEmpty()) {                            viewModel.setScalesName(error = "Nama timbangan tidak boleh kosong")                            return@Button                        } else if (brand.text.isEmpty()) {                            viewModel.setScalesBrand(error = "Merk/Pabrik tidak boleh kosong")                            return@Button                        } else if (kindType.text.isEmpty()) {                            viewModel.setScalesKindType(error = "Type tidak boleh kosong")                            return@Button                        } else if (unit.text.isEmpty()) {                            viewModel.setScalesUnit(error = "Satuan tidak boleh kosong")                            return@Button                        } else if (serialNumber.text.isEmpty()) {                            viewModel.setScalesSerialNumber(error = "Serial Number tidak boleh kosong")                            return@Button                        } else if (location.text.isEmpty()) {                            viewModel.setScalesLocation(error = "Lokasi tidak boleh kosong")                            return@Button                        }                        navigator.openNextCreateScalesScreen(                            imageCover = viewModel.scalesImageCover.value!!,                            name = name.text,                            brand = brand.text,                            kindType = viewModel.scalesKindType.value.text,                            serialNumber = viewModel.scalesSerialNumber.value.text,                            location = viewModel.scalesLocation.value.text,                            rangeCapacity = viewModel.scalesRangeCapacity.value,                            unit = unit.text                        )                    },                    shape = RoundedCornerShape(12.dp)                ) {                    Text(                        modifier = Modifier                            .padding(8.dp)                            .fillMaxWidth(),                        text = "Lanjut",                        textAlign = TextAlign.Center,                        fontSize = 16.sp,                        fontFamily = fontFamily                    )                }            }        }    }}